// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePayout is the `closePayout` instruction.
type ClosePayout struct {

	// [0] = [WRITE] controller
	//
	// [1] = [WRITE] controllerPcVault
	//
	// [2] = [WRITE] pipeline
	//
	// [3] = [WRITE] pipelinePcVault
	//
	// [4] = [WRITE] payout
	//
	// [5] = [WRITE, SIGNER] pipelineAdmin
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClosePayoutInstructionBuilder creates a new `ClosePayout` instruction builder.
func NewClosePayoutInstructionBuilder() *ClosePayout {
	nd := &ClosePayout{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetControllerAccount sets the "controller" account.
func (inst *ClosePayout) SetControllerAccount(controller ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller).WRITE()
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *ClosePayout) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetControllerPcVaultAccount sets the "controllerPcVault" account.
func (inst *ClosePayout) SetControllerPcVaultAccount(controllerPcVault ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(controllerPcVault).WRITE()
	return inst
}

// GetControllerPcVaultAccount gets the "controllerPcVault" account.
func (inst *ClosePayout) GetControllerPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *ClosePayout) SetPipelineAccount(pipeline ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pipeline).WRITE()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *ClosePayout) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPipelinePcVaultAccount sets the "pipelinePcVault" account.
func (inst *ClosePayout) SetPipelinePcVaultAccount(pipelinePcVault ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pipelinePcVault).WRITE()
	return inst
}

// GetPipelinePcVaultAccount gets the "pipelinePcVault" account.
func (inst *ClosePayout) GetPipelinePcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayoutAccount sets the "payout" account.
func (inst *ClosePayout) SetPayoutAccount(payout ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payout).WRITE()
	return inst
}

// GetPayoutAccount gets the "payout" account.
func (inst *ClosePayout) GetPayoutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPipelineAdminAccount sets the "pipelineAdmin" account.
func (inst *ClosePayout) SetPipelineAdminAccount(pipelineAdmin ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(pipelineAdmin).WRITE().SIGNER()
	return inst
}

// GetPipelineAdminAccount gets the "pipelineAdmin" account.
func (inst *ClosePayout) GetPipelineAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ClosePayout) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ClosePayout) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetClockAccount sets the "clock" account.
func (inst *ClosePayout) SetClockAccount(clock ag_solanago.PublicKey) *ClosePayout {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *ClosePayout) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst ClosePayout) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePayout,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePayout) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePayout) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ControllerPcVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PipelinePcVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payout is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PipelineAdmin is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *ClosePayout) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePayout")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("controllerPcVault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         pipeline", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  pipelinePcVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           payout", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    pipelineAdmin", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            clock", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj ClosePayout) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClosePayout) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClosePayoutInstruction declares a new ClosePayout instruction with the provided parameters and accounts.
func NewClosePayoutInstruction(
	// Accounts:
	controller ag_solanago.PublicKey,
	controllerPcVault ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	pipelinePcVault ag_solanago.PublicKey,
	payout ag_solanago.PublicKey,
	pipelineAdmin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *ClosePayout {
	return NewClosePayoutInstructionBuilder().
		SetControllerAccount(controller).
		SetControllerPcVaultAccount(controllerPcVault).
		SetPipelineAccount(pipeline).
		SetPipelinePcVaultAccount(pipelinePcVault).
		SetPayoutAccount(payout).
		SetPipelineAdminAccount(pipelineAdmin).
		SetTokenProgramAccount(tokenProgram).
		SetClockAccount(clock)
}
