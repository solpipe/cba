// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Close is the `close` instruction.
type Close struct {

	// [0] = [] controller
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [] pcMint
	//
	// [3] = [] pcVault
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseInstructionBuilder creates a new `Close` instruction builder.
func NewCloseInstructionBuilder() *Close {
	nd := &Close{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetControllerAccount sets the "controller" account.
func (inst *Close) SetControllerAccount(controller ag_solanago.PublicKey) *Close {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *Close) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *Close) SetAdminAccount(admin ag_solanago.PublicKey) *Close {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *Close) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPcMintAccount sets the "pcMint" account.
func (inst *Close) SetPcMintAccount(pcMint ag_solanago.PublicKey) *Close {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pcMint)
	return inst
}

// GetPcMintAccount gets the "pcMint" account.
func (inst *Close) GetPcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPcVaultAccount sets the "pcVault" account.
func (inst *Close) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *Close {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pcVault)
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
func (inst *Close) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst Close) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Close,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Close) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Close) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PcMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PcVault is not set")
		}
	}
	return nil
}

func (inst *Close) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Close")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    pcMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   pcVault", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj Close) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Close) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseInstruction declares a new Close instruction with the provided parameters and accounts.
func NewCloseInstruction(
	// Accounts:
	controller ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	pcMint ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey) *Close {
	return NewCloseInstructionBuilder().
		SetControllerAccount(controller).
		SetAdminAccount(admin).
		SetPcMintAccount(pcMint).
		SetPcVaultAccount(pcVault)
}
