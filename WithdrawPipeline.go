// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawPipeline is the `withdrawPipeline` instruction.
type WithdrawPipeline struct {

	// [0] = [] controller
	//
	// [1] = [WRITE] pipeline
	//
	// [2] = [WRITE] pcVault
	//
	// [3] = [WRITE] pipelineAdminFunds
	//
	// [4] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawPipelineInstructionBuilder creates a new `WithdrawPipeline` instruction builder.
func NewWithdrawPipelineInstructionBuilder() *WithdrawPipeline {
	nd := &WithdrawPipeline{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetControllerAccount sets the "controller" account.
func (inst *WithdrawPipeline) SetControllerAccount(controller ag_solanago.PublicKey) *WithdrawPipeline {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *WithdrawPipeline) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *WithdrawPipeline) SetPipelineAccount(pipeline ag_solanago.PublicKey) *WithdrawPipeline {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pipeline).WRITE()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *WithdrawPipeline) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPcVaultAccount sets the "pcVault" account.
func (inst *WithdrawPipeline) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *WithdrawPipeline {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
func (inst *WithdrawPipeline) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPipelineAdminFundsAccount sets the "pipelineAdminFunds" account.
func (inst *WithdrawPipeline) SetPipelineAdminFundsAccount(pipelineAdminFunds ag_solanago.PublicKey) *WithdrawPipeline {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pipelineAdminFunds).WRITE()
	return inst
}

// GetPipelineAdminFundsAccount gets the "pipelineAdminFunds" account.
func (inst *WithdrawPipeline) GetPipelineAdminFundsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawPipeline) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawPipeline {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawPipeline) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst WithdrawPipeline) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawPipeline,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawPipeline) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawPipeline) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PcVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PipelineAdminFunds is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawPipeline) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawPipeline")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          pipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           pcVault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("pipelineAdminFunds", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj WithdrawPipeline) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawPipeline) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawPipelineInstruction declares a new WithdrawPipeline instruction with the provided parameters and accounts.
func NewWithdrawPipelineInstruction(
	// Accounts:
	controller ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey,
	pipelineAdminFunds ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawPipeline {
	return NewWithdrawPipelineInstructionBuilder().
		SetControllerAccount(controller).
		SetPipelineAccount(pipeline).
		SetPcVaultAccount(pcVault).
		SetPipelineAdminFundsAccount(pipelineAdminFunds).
		SetTokenProgramAccount(tokenProgram)
}
