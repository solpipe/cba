// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Update parameters including the default fees and decay rate.
//
// # Errors
//
// This function will return an error if .
type UpdatePipeline struct {
	Allotment               *uint16
	DecayRateNum            *uint64
	DecayRateDen            *uint64
	CrankFeeRateNum         *uint64
	CrankFeeRateDen         *uint64
	ValidatorPayoutShareNum *uint64
	ValidatorPayoutShareDen *uint64

	// [0] = [] controller
	//
	// [1] = [WRITE] pipeline
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [WRITE, SIGNER] newAdmin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdatePipelineInstructionBuilder creates a new `UpdatePipeline` instruction builder.
func NewUpdatePipelineInstructionBuilder() *UpdatePipeline {
	nd := &UpdatePipeline{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetAllotment sets the "allotment" parameter.
func (inst *UpdatePipeline) SetAllotment(allotment uint16) *UpdatePipeline {
	inst.Allotment = &allotment
	return inst
}

// SetDecayRateNum sets the "decayRateNum" parameter.
func (inst *UpdatePipeline) SetDecayRateNum(decayRateNum uint64) *UpdatePipeline {
	inst.DecayRateNum = &decayRateNum
	return inst
}

// SetDecayRateDen sets the "decayRateDen" parameter.
func (inst *UpdatePipeline) SetDecayRateDen(decayRateDen uint64) *UpdatePipeline {
	inst.DecayRateDen = &decayRateDen
	return inst
}

// SetCrankFeeRateNum sets the "crankFeeRateNum" parameter.
func (inst *UpdatePipeline) SetCrankFeeRateNum(crankFeeRateNum uint64) *UpdatePipeline {
	inst.CrankFeeRateNum = &crankFeeRateNum
	return inst
}

// SetCrankFeeRateDen sets the "crankFeeRateDen" parameter.
func (inst *UpdatePipeline) SetCrankFeeRateDen(crankFeeRateDen uint64) *UpdatePipeline {
	inst.CrankFeeRateDen = &crankFeeRateDen
	return inst
}

// SetValidatorPayoutShareNum sets the "validatorPayoutShareNum" parameter.
func (inst *UpdatePipeline) SetValidatorPayoutShareNum(validatorPayoutShareNum uint64) *UpdatePipeline {
	inst.ValidatorPayoutShareNum = &validatorPayoutShareNum
	return inst
}

// SetValidatorPayoutShareDen sets the "validatorPayoutShareDen" parameter.
func (inst *UpdatePipeline) SetValidatorPayoutShareDen(validatorPayoutShareDen uint64) *UpdatePipeline {
	inst.ValidatorPayoutShareDen = &validatorPayoutShareDen
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *UpdatePipeline) SetControllerAccount(controller ag_solanago.PublicKey) *UpdatePipeline {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *UpdatePipeline) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *UpdatePipeline) SetPipelineAccount(pipeline ag_solanago.PublicKey) *UpdatePipeline {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pipeline).WRITE()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *UpdatePipeline) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdatePipeline) SetAdminAccount(admin ag_solanago.PublicKey) *UpdatePipeline {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdatePipeline) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewAdminAccount sets the "newAdmin" account.
func (inst *UpdatePipeline) SetNewAdminAccount(newAdmin ag_solanago.PublicKey) *UpdatePipeline {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newAdmin).WRITE().SIGNER()
	return inst
}

// GetNewAdminAccount gets the "newAdmin" account.
func (inst *UpdatePipeline) GetNewAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdatePipeline) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdatePipeline,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdatePipeline) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdatePipeline) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Allotment == nil {
			return errors.New("Allotment parameter is not set")
		}
		if inst.DecayRateNum == nil {
			return errors.New("DecayRateNum parameter is not set")
		}
		if inst.DecayRateDen == nil {
			return errors.New("DecayRateDen parameter is not set")
		}
		if inst.CrankFeeRateNum == nil {
			return errors.New("CrankFeeRateNum parameter is not set")
		}
		if inst.CrankFeeRateDen == nil {
			return errors.New("CrankFeeRateDen parameter is not set")
		}
		if inst.ValidatorPayoutShareNum == nil {
			return errors.New("ValidatorPayoutShareNum parameter is not set")
		}
		if inst.ValidatorPayoutShareDen == nil {
			return errors.New("ValidatorPayoutShareDen parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewAdmin is not set")
		}
	}
	return nil
}

func (inst *UpdatePipeline) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdatePipeline")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=7]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              Allotment", *inst.Allotment))
						paramsBranch.Child(ag_format.Param("           DecayRateNum", *inst.DecayRateNum))
						paramsBranch.Child(ag_format.Param("           DecayRateDen", *inst.DecayRateDen))
						paramsBranch.Child(ag_format.Param("        CrankFeeRateNum", *inst.CrankFeeRateNum))
						paramsBranch.Child(ag_format.Param("        CrankFeeRateDen", *inst.CrankFeeRateDen))
						paramsBranch.Child(ag_format.Param("ValidatorPayoutShareNum", *inst.ValidatorPayoutShareNum))
						paramsBranch.Child(ag_format.Param("ValidatorPayoutShareDen", *inst.ValidatorPayoutShareDen))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  pipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  newAdmin", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdatePipeline) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Allotment` param:
	err = encoder.Encode(obj.Allotment)
	if err != nil {
		return err
	}
	// Serialize `DecayRateNum` param:
	err = encoder.Encode(obj.DecayRateNum)
	if err != nil {
		return err
	}
	// Serialize `DecayRateDen` param:
	err = encoder.Encode(obj.DecayRateDen)
	if err != nil {
		return err
	}
	// Serialize `CrankFeeRateNum` param:
	err = encoder.Encode(obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Serialize `CrankFeeRateDen` param:
	err = encoder.Encode(obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Serialize `ValidatorPayoutShareNum` param:
	err = encoder.Encode(obj.ValidatorPayoutShareNum)
	if err != nil {
		return err
	}
	// Serialize `ValidatorPayoutShareDen` param:
	err = encoder.Encode(obj.ValidatorPayoutShareDen)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdatePipeline) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Allotment`:
	err = decoder.Decode(&obj.Allotment)
	if err != nil {
		return err
	}
	// Deserialize `DecayRateNum`:
	err = decoder.Decode(&obj.DecayRateNum)
	if err != nil {
		return err
	}
	// Deserialize `DecayRateDen`:
	err = decoder.Decode(&obj.DecayRateDen)
	if err != nil {
		return err
	}
	// Deserialize `CrankFeeRateNum`:
	err = decoder.Decode(&obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Deserialize `CrankFeeRateDen`:
	err = decoder.Decode(&obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorPayoutShareNum`:
	err = decoder.Decode(&obj.ValidatorPayoutShareNum)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorPayoutShareDen`:
	err = decoder.Decode(&obj.ValidatorPayoutShareDen)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdatePipelineInstruction declares a new UpdatePipeline instruction with the provided parameters and accounts.
func NewUpdatePipelineInstruction(
	// Parameters:
	allotment uint16,
	decayRateNum uint64,
	decayRateDen uint64,
	crankFeeRateNum uint64,
	crankFeeRateDen uint64,
	validatorPayoutShareNum uint64,
	validatorPayoutShareDen uint64,
	// Accounts:
	controller ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	newAdmin ag_solanago.PublicKey) *UpdatePipeline {
	return NewUpdatePipelineInstructionBuilder().
		SetAllotment(allotment).
		SetDecayRateNum(decayRateNum).
		SetDecayRateDen(decayRateDen).
		SetCrankFeeRateNum(crankFeeRateNum).
		SetCrankFeeRateDen(crankFeeRateDen).
		SetValidatorPayoutShareNum(validatorPayoutShareNum).
		SetValidatorPayoutShareDen(validatorPayoutShareDen).
		SetControllerAccount(controller).
		SetPipelineAccount(pipeline).
		SetAdminAccount(admin).
		SetNewAdminAccount(newAdmin)
}
