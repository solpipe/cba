// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create a Pipeline that is managed by a proxy operator.
//
// # Panics
//
// Panics if .
//
// # Errors
//
// This function will return an error if .
type AddPipeline struct {
	Allotment               *uint16
	DecayRateNum            *uint64
	DecayRateDen            *uint64
	CrankFeeRateNum         *uint64
	CrankFeeRateDen         *uint64
	ValidatorPayoutShareNum *uint64
	ValidatorPayoutShareDen *uint64

	// [0] = [] controller
	//
	// [1] = [] pcMint
	//
	// [2] = [WRITE, SIGNER] pipeline
	//
	// [3] = [WRITE] pipelineVault
	//
	// [4] = [WRITE] periods
	//
	// [5] = [WRITE] bids
	//
	// [6] = [WRITE, SIGNER] admin
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] systemProgram
	//
	// [9] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddPipelineInstructionBuilder creates a new `AddPipeline` instruction builder.
func NewAddPipelineInstructionBuilder() *AddPipeline {
	nd := &AddPipeline{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetAllotment sets the "allotment" parameter.
func (inst *AddPipeline) SetAllotment(allotment uint16) *AddPipeline {
	inst.Allotment = &allotment
	return inst
}

// SetDecayRateNum sets the "decayRateNum" parameter.
func (inst *AddPipeline) SetDecayRateNum(decayRateNum uint64) *AddPipeline {
	inst.DecayRateNum = &decayRateNum
	return inst
}

// SetDecayRateDen sets the "decayRateDen" parameter.
func (inst *AddPipeline) SetDecayRateDen(decayRateDen uint64) *AddPipeline {
	inst.DecayRateDen = &decayRateDen
	return inst
}

// SetCrankFeeRateNum sets the "crankFeeRateNum" parameter.
func (inst *AddPipeline) SetCrankFeeRateNum(crankFeeRateNum uint64) *AddPipeline {
	inst.CrankFeeRateNum = &crankFeeRateNum
	return inst
}

// SetCrankFeeRateDen sets the "crankFeeRateDen" parameter.
func (inst *AddPipeline) SetCrankFeeRateDen(crankFeeRateDen uint64) *AddPipeline {
	inst.CrankFeeRateDen = &crankFeeRateDen
	return inst
}

// SetValidatorPayoutShareNum sets the "validatorPayoutShareNum" parameter.
func (inst *AddPipeline) SetValidatorPayoutShareNum(validatorPayoutShareNum uint64) *AddPipeline {
	inst.ValidatorPayoutShareNum = &validatorPayoutShareNum
	return inst
}

// SetValidatorPayoutShareDen sets the "validatorPayoutShareDen" parameter.
func (inst *AddPipeline) SetValidatorPayoutShareDen(validatorPayoutShareDen uint64) *AddPipeline {
	inst.ValidatorPayoutShareDen = &validatorPayoutShareDen
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *AddPipeline) SetControllerAccount(controller ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *AddPipeline) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPcMintAccount sets the "pcMint" account.
func (inst *AddPipeline) SetPcMintAccount(pcMint ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pcMint)
	return inst
}

// GetPcMintAccount gets the "pcMint" account.
func (inst *AddPipeline) GetPcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *AddPipeline) SetPipelineAccount(pipeline ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pipeline).WRITE().SIGNER()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *AddPipeline) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPipelineVaultAccount sets the "pipelineVault" account.
func (inst *AddPipeline) SetPipelineVaultAccount(pipelineVault ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pipelineVault).WRITE()
	return inst
}

// GetPipelineVaultAccount gets the "pipelineVault" account.
func (inst *AddPipeline) GetPipelineVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPeriodsAccount sets the "periods" account.
func (inst *AddPipeline) SetPeriodsAccount(periods ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(periods).WRITE()
	return inst
}

// GetPeriodsAccount gets the "periods" account.
func (inst *AddPipeline) GetPeriodsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBidsAccount sets the "bids" account.
func (inst *AddPipeline) SetBidsAccount(bids ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *AddPipeline) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAdminAccount sets the "admin" account.
func (inst *AddPipeline) SetAdminAccount(admin ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AddPipeline) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AddPipeline) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AddPipeline) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddPipeline) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddPipeline) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *AddPipeline) SetRentAccount(rent ag_solanago.PublicKey) *AddPipeline {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AddPipeline) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst AddPipeline) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddPipeline,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddPipeline) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddPipeline) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Allotment == nil {
			return errors.New("Allotment parameter is not set")
		}
		if inst.DecayRateNum == nil {
			return errors.New("DecayRateNum parameter is not set")
		}
		if inst.DecayRateDen == nil {
			return errors.New("DecayRateDen parameter is not set")
		}
		if inst.CrankFeeRateNum == nil {
			return errors.New("CrankFeeRateNum parameter is not set")
		}
		if inst.CrankFeeRateDen == nil {
			return errors.New("CrankFeeRateDen parameter is not set")
		}
		if inst.ValidatorPayoutShareNum == nil {
			return errors.New("ValidatorPayoutShareNum parameter is not set")
		}
		if inst.ValidatorPayoutShareDen == nil {
			return errors.New("ValidatorPayoutShareDen parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PcMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PipelineVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Periods is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *AddPipeline) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddPipeline")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=7]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              Allotment", *inst.Allotment))
						paramsBranch.Child(ag_format.Param("           DecayRateNum", *inst.DecayRateNum))
						paramsBranch.Child(ag_format.Param("           DecayRateDen", *inst.DecayRateDen))
						paramsBranch.Child(ag_format.Param("        CrankFeeRateNum", *inst.CrankFeeRateNum))
						paramsBranch.Child(ag_format.Param("        CrankFeeRateDen", *inst.CrankFeeRateDen))
						paramsBranch.Child(ag_format.Param("ValidatorPayoutShareNum", *inst.ValidatorPayoutShareNum))
						paramsBranch.Child(ag_format.Param("ValidatorPayoutShareDen", *inst.ValidatorPayoutShareDen))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       pcMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     pipeline", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("pipelineVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      periods", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         bids", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj AddPipeline) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Allotment` param:
	err = encoder.Encode(obj.Allotment)
	if err != nil {
		return err
	}
	// Serialize `DecayRateNum` param:
	err = encoder.Encode(obj.DecayRateNum)
	if err != nil {
		return err
	}
	// Serialize `DecayRateDen` param:
	err = encoder.Encode(obj.DecayRateDen)
	if err != nil {
		return err
	}
	// Serialize `CrankFeeRateNum` param:
	err = encoder.Encode(obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Serialize `CrankFeeRateDen` param:
	err = encoder.Encode(obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Serialize `ValidatorPayoutShareNum` param:
	err = encoder.Encode(obj.ValidatorPayoutShareNum)
	if err != nil {
		return err
	}
	// Serialize `ValidatorPayoutShareDen` param:
	err = encoder.Encode(obj.ValidatorPayoutShareDen)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddPipeline) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Allotment`:
	err = decoder.Decode(&obj.Allotment)
	if err != nil {
		return err
	}
	// Deserialize `DecayRateNum`:
	err = decoder.Decode(&obj.DecayRateNum)
	if err != nil {
		return err
	}
	// Deserialize `DecayRateDen`:
	err = decoder.Decode(&obj.DecayRateDen)
	if err != nil {
		return err
	}
	// Deserialize `CrankFeeRateNum`:
	err = decoder.Decode(&obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Deserialize `CrankFeeRateDen`:
	err = decoder.Decode(&obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorPayoutShareNum`:
	err = decoder.Decode(&obj.ValidatorPayoutShareNum)
	if err != nil {
		return err
	}
	// Deserialize `ValidatorPayoutShareDen`:
	err = decoder.Decode(&obj.ValidatorPayoutShareDen)
	if err != nil {
		return err
	}
	return nil
}

// NewAddPipelineInstruction declares a new AddPipeline instruction with the provided parameters and accounts.
func NewAddPipelineInstruction(
	// Parameters:
	allotment uint16,
	decayRateNum uint64,
	decayRateDen uint64,
	crankFeeRateNum uint64,
	crankFeeRateDen uint64,
	validatorPayoutShareNum uint64,
	validatorPayoutShareDen uint64,
	// Accounts:
	controller ag_solanago.PublicKey,
	pcMint ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	pipelineVault ag_solanago.PublicKey,
	periods ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *AddPipeline {
	return NewAddPipelineInstructionBuilder().
		SetAllotment(allotment).
		SetDecayRateNum(decayRateNum).
		SetDecayRateDen(decayRateDen).
		SetCrankFeeRateNum(crankFeeRateNum).
		SetCrankFeeRateDen(crankFeeRateDen).
		SetValidatorPayoutShareNum(validatorPayoutShareNum).
		SetValidatorPayoutShareDen(validatorPayoutShareDen).
		SetControllerAccount(controller).
		SetPcMintAccount(pcMint).
		SetPipelineAccount(pipeline).
		SetPipelineVaultAccount(pipelineVault).
		SetPeriodsAccount(periods).
		SetBidsAccount(bids).
		SetAdminAccount(admin).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
