// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create a controller. The admin can be another program.
//
// # Panics
//
// Panics if .
//
// # Errors
//
// This function will return an error if .
type Create struct {
	ControllerFeeNum *uint64
	ControllerFeeDen *uint64

	// [0] = [WRITE] controller
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [WRITE, SIGNER] crankAuthority
	//
	// [3] = [] pcMint
	//
	// [4] = [WRITE] pcVault
	//
	// [5] = [] clock
	//
	// [6] = [] epochSchedule
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] systemProgram
	//
	// [9] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateInstructionBuilder creates a new `Create` instruction builder.
func NewCreateInstructionBuilder() *Create {
	nd := &Create{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetControllerFeeNum sets the "controllerFeeNum" parameter.
func (inst *Create) SetControllerFeeNum(controllerFeeNum uint64) *Create {
	inst.ControllerFeeNum = &controllerFeeNum
	return inst
}

// SetControllerFeeDen sets the "controllerFeeDen" parameter.
func (inst *Create) SetControllerFeeDen(controllerFeeDen uint64) *Create {
	inst.ControllerFeeDen = &controllerFeeDen
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *Create) SetControllerAccount(controller ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller).WRITE()
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *Create) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *Create) SetAdminAccount(admin ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *Create) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCrankAuthorityAccount sets the "crankAuthority" account.
func (inst *Create) SetCrankAuthorityAccount(crankAuthority ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(crankAuthority).WRITE().SIGNER()
	return inst
}

// GetCrankAuthorityAccount gets the "crankAuthority" account.
func (inst *Create) GetCrankAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPcMintAccount sets the "pcMint" account.
func (inst *Create) SetPcMintAccount(pcMint ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pcMint)
	return inst
}

// GetPcMintAccount gets the "pcMint" account.
func (inst *Create) GetPcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPcVaultAccount sets the "pcVault" account.
func (inst *Create) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
func (inst *Create) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetClockAccount sets the "clock" account.
func (inst *Create) SetClockAccount(clock ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *Create) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEpochScheduleAccount sets the "epochSchedule" account.
func (inst *Create) SetEpochScheduleAccount(epochSchedule ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(epochSchedule)
	return inst
}

// GetEpochScheduleAccount gets the "epochSchedule" account.
func (inst *Create) GetEpochScheduleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Create) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Create) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Create) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Create) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *Create) SetRentAccount(rent ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *Create) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst Create) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Create,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Create) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Create) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ControllerFeeNum == nil {
			return errors.New("ControllerFeeNum parameter is not set")
		}
		if inst.ControllerFeeDen == nil {
			return errors.New("ControllerFeeDen parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CrankAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PcMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PcVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EpochSchedule is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *Create) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Create")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ControllerFeeNum", *inst.ControllerFeeNum))
						paramsBranch.Child(ag_format.Param("ControllerFeeDen", *inst.ControllerFeeDen))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("crankAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        pcMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       pcVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         clock", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" epochSchedule", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          rent", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj Create) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ControllerFeeNum` param:
	err = encoder.Encode(obj.ControllerFeeNum)
	if err != nil {
		return err
	}
	// Serialize `ControllerFeeDen` param:
	err = encoder.Encode(obj.ControllerFeeDen)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Create) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ControllerFeeNum`:
	err = decoder.Decode(&obj.ControllerFeeNum)
	if err != nil {
		return err
	}
	// Deserialize `ControllerFeeDen`:
	err = decoder.Decode(&obj.ControllerFeeDen)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateInstruction declares a new Create instruction with the provided parameters and accounts.
func NewCreateInstruction(
	// Parameters:
	controllerFeeNum uint64,
	controllerFeeDen uint64,
	// Accounts:
	controller ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	crankAuthority ag_solanago.PublicKey,
	pcMint ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	epochSchedule ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *Create {
	return NewCreateInstructionBuilder().
		SetControllerFeeNum(controllerFeeNum).
		SetControllerFeeDen(controllerFeeDen).
		SetControllerAccount(controller).
		SetAdminAccount(admin).
		SetCrankAuthorityAccount(crankAuthority).
		SetPcMintAccount(pcMint).
		SetPcVaultAccount(pcVault).
		SetClockAccount(clock).
		SetEpochScheduleAccount(epochSchedule).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
