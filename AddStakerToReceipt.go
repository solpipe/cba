// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// add staker to receipt
//
// # Panics
//
// Panics if .
//
// # Errors
//
// This function will return an error if .
type AddStakerToReceipt struct {

	// [0] = [WRITE] controller
	//
	// [1] = [] payout
	//
	// [2] = [WRITE] receipt
	//
	// [3] = [] stakerManager
	//
	// [4] = [] validatorManager
	//
	// [5] = [WRITE] stakerReceipt
	//
	// [6] = [] staker
	//
	// [7] = [WRITE, SIGNER] stakeAdmin
	//
	// [8] = [] clock
	//
	// [9] = [] systemProgram
	//
	// [10] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddStakerToReceiptInstructionBuilder creates a new `AddStakerToReceipt` instruction builder.
func NewAddStakerToReceiptInstructionBuilder() *AddStakerToReceipt {
	nd := &AddStakerToReceipt{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetControllerAccount sets the "controller" account.
func (inst *AddStakerToReceipt) SetControllerAccount(controller ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller).WRITE()
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *AddStakerToReceipt) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayoutAccount sets the "payout" account.
func (inst *AddStakerToReceipt) SetPayoutAccount(payout ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payout)
	return inst
}

// GetPayoutAccount gets the "payout" account.
func (inst *AddStakerToReceipt) GetPayoutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetReceiptAccount sets the "receipt" account.
func (inst *AddStakerToReceipt) SetReceiptAccount(receipt ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(receipt).WRITE()
	return inst
}

// GetReceiptAccount gets the "receipt" account.
func (inst *AddStakerToReceipt) GetReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakerManagerAccount sets the "stakerManager" account.
func (inst *AddStakerToReceipt) SetStakerManagerAccount(stakerManager ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakerManager)
	return inst
}

// GetStakerManagerAccount gets the "stakerManager" account.
func (inst *AddStakerToReceipt) GetStakerManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetValidatorManagerAccount sets the "validatorManager" account.
func (inst *AddStakerToReceipt) SetValidatorManagerAccount(validatorManager ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(validatorManager)
	return inst
}

// GetValidatorManagerAccount gets the "validatorManager" account.
func (inst *AddStakerToReceipt) GetValidatorManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStakerReceiptAccount sets the "stakerReceipt" account.
func (inst *AddStakerToReceipt) SetStakerReceiptAccount(stakerReceipt ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(stakerReceipt).WRITE()
	return inst
}

// GetStakerReceiptAccount gets the "stakerReceipt" account.
func (inst *AddStakerToReceipt) GetStakerReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetStakerAccount sets the "staker" account.
func (inst *AddStakerToReceipt) SetStakerAccount(staker ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(staker)
	return inst
}

// GetStakerAccount gets the "staker" account.
func (inst *AddStakerToReceipt) GetStakerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetStakeAdminAccount sets the "stakeAdmin" account.
func (inst *AddStakerToReceipt) SetStakeAdminAccount(stakeAdmin ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(stakeAdmin).WRITE().SIGNER()
	return inst
}

// GetStakeAdminAccount gets the "stakeAdmin" account.
func (inst *AddStakerToReceipt) GetStakeAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetClockAccount sets the "clock" account.
func (inst *AddStakerToReceipt) SetClockAccount(clock ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *AddStakerToReceipt) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddStakerToReceipt) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddStakerToReceipt) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetRentAccount sets the "rent" account.
func (inst *AddStakerToReceipt) SetRentAccount(rent ag_solanago.PublicKey) *AddStakerToReceipt {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AddStakerToReceipt) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst AddStakerToReceipt) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddStakerToReceipt,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddStakerToReceipt) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddStakerToReceipt) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payout is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Receipt is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakerManager is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ValidatorManager is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StakerReceipt is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Staker is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.StakeAdmin is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *AddStakerToReceipt) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddStakerToReceipt")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          payout", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         receipt", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   stakerManager", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("validatorManager", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   stakerReceipt", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          staker", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      stakeAdmin", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           clock", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj AddStakerToReceipt) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AddStakerToReceipt) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAddStakerToReceiptInstruction declares a new AddStakerToReceipt instruction with the provided parameters and accounts.
func NewAddStakerToReceiptInstruction(
	// Accounts:
	controller ag_solanago.PublicKey,
	payout ag_solanago.PublicKey,
	receipt ag_solanago.PublicKey,
	stakerManager ag_solanago.PublicKey,
	validatorManager ag_solanago.PublicKey,
	stakerReceipt ag_solanago.PublicKey,
	staker ag_solanago.PublicKey,
	stakeAdmin ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *AddStakerToReceipt {
	return NewAddStakerToReceiptInstructionBuilder().
		SetControllerAccount(controller).
		SetPayoutAccount(payout).
		SetReceiptAccount(receipt).
		SetStakerManagerAccount(stakerManager).
		SetValidatorManagerAccount(validatorManager).
		SetStakerReceiptAccount(stakerReceipt).
		SetStakerAccount(staker).
		SetStakeAdminAccount(stakeAdmin).
		SetClockAccount(clock).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
