// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create a new Payout account and cycle periods forward in time.
//
// # Panics
//
// Panics if .
//
// # Errors
//
// This function will return an error if .
type AppendPeriod struct {
	Withhold *uint16
	Start    *uint64
	Length   *uint64

	// [0] = [] controller
	//
	// [1] = [WRITE] pipeline
	//
	// [2] = [WRITE] periods
	//
	// [3] = [WRITE, SIGNER] payout
	//
	// [4] = [WRITE, SIGNER] admin
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] systemProgram
	//
	// [7] = [] rent
	//
	// [8] = [] clock
	//
	// [9] = [] epochSchedule
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAppendPeriodInstructionBuilder creates a new `AppendPeriod` instruction builder.
func NewAppendPeriodInstructionBuilder() *AppendPeriod {
	nd := &AppendPeriod{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetWithhold sets the "withhold" parameter.
func (inst *AppendPeriod) SetWithhold(withhold uint16) *AppendPeriod {
	inst.Withhold = &withhold
	return inst
}

// SetStart sets the "start" parameter.
func (inst *AppendPeriod) SetStart(start uint64) *AppendPeriod {
	inst.Start = &start
	return inst
}

// SetLength sets the "length" parameter.
func (inst *AppendPeriod) SetLength(length uint64) *AppendPeriod {
	inst.Length = &length
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *AppendPeriod) SetControllerAccount(controller ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *AppendPeriod) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *AppendPeriod) SetPipelineAccount(pipeline ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pipeline).WRITE()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *AppendPeriod) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPeriodsAccount sets the "periods" account.
func (inst *AppendPeriod) SetPeriodsAccount(periods ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(periods).WRITE()
	return inst
}

// GetPeriodsAccount gets the "periods" account.
func (inst *AppendPeriod) GetPeriodsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayoutAccount sets the "payout" account.
func (inst *AppendPeriod) SetPayoutAccount(payout ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payout).WRITE().SIGNER()
	return inst
}

// GetPayoutAccount gets the "payout" account.
func (inst *AppendPeriod) GetPayoutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAdminAccount sets the "admin" account.
func (inst *AppendPeriod) SetAdminAccount(admin ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AppendPeriod) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AppendPeriod) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AppendPeriod) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AppendPeriod) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AppendPeriod) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *AppendPeriod) SetRentAccount(rent ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AppendPeriod) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetClockAccount sets the "clock" account.
func (inst *AppendPeriod) SetClockAccount(clock ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *AppendPeriod) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEpochScheduleAccount sets the "epochSchedule" account.
func (inst *AppendPeriod) SetEpochScheduleAccount(epochSchedule ag_solanago.PublicKey) *AppendPeriod {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(epochSchedule)
	return inst
}

// GetEpochScheduleAccount gets the "epochSchedule" account.
func (inst *AppendPeriod) GetEpochScheduleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst AppendPeriod) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AppendPeriod,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AppendPeriod) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AppendPeriod) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Withhold == nil {
			return errors.New("Withhold parameter is not set")
		}
		if inst.Start == nil {
			return errors.New("Start parameter is not set")
		}
		if inst.Length == nil {
			return errors.New("Length parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Periods is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payout is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.EpochSchedule is not set")
		}
	}
	return nil
}

func (inst *AppendPeriod) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AppendPeriod")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Withhold", *inst.Withhold))
						paramsBranch.Child(ag_format.Param("   Start", *inst.Start))
						paramsBranch.Child(ag_format.Param("  Length", *inst.Length))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     pipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      periods", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       payout", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        clock", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("epochSchedule", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj AppendPeriod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Withhold` param:
	err = encoder.Encode(obj.Withhold)
	if err != nil {
		return err
	}
	// Serialize `Start` param:
	err = encoder.Encode(obj.Start)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AppendPeriod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Withhold`:
	err = decoder.Decode(&obj.Withhold)
	if err != nil {
		return err
	}
	// Deserialize `Start`:
	err = decoder.Decode(&obj.Start)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

// NewAppendPeriodInstruction declares a new AppendPeriod instruction with the provided parameters and accounts.
func NewAppendPeriodInstruction(
	// Parameters:
	withhold uint16,
	start uint64,
	length uint64,
	// Accounts:
	controller ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	periods ag_solanago.PublicKey,
	payout ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	epochSchedule ag_solanago.PublicKey) *AppendPeriod {
	return NewAppendPeriodInstructionBuilder().
		SetWithhold(withhold).
		SetStart(start).
		SetLength(length).
		SetControllerAccount(controller).
		SetPipelineAccount(pipeline).
		SetPeriodsAccount(periods).
		SetPayoutAccount(payout).
		SetAdminAccount(admin).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetClockAccount(clock).
		SetEpochScheduleAccount(epochSchedule)
}
