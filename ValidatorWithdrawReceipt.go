// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ValidatorWithdrawReceipt is the `validatorWithdrawReceipt` instruction.
type ValidatorWithdrawReceipt struct {

	// [0] = [WRITE] controller
	//
	// [1] = [WRITE] pipeline
	//
	// [2] = [WRITE] pcVault
	//
	// [3] = [WRITE] payout
	//
	// [4] = [] validatorManager
	//
	// [5] = [WRITE] receipt
	//
	// [6] = [WRITE] validatorFund
	//
	// [7] = [SIGNER] validatorAdmin
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewValidatorWithdrawReceiptInstructionBuilder creates a new `ValidatorWithdrawReceipt` instruction builder.
func NewValidatorWithdrawReceiptInstructionBuilder() *ValidatorWithdrawReceipt {
	nd := &ValidatorWithdrawReceipt{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetControllerAccount sets the "controller" account.
func (inst *ValidatorWithdrawReceipt) SetControllerAccount(controller ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller).WRITE()
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *ValidatorWithdrawReceipt) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *ValidatorWithdrawReceipt) SetPipelineAccount(pipeline ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pipeline).WRITE()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *ValidatorWithdrawReceipt) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPcVaultAccount sets the "pcVault" account.
func (inst *ValidatorWithdrawReceipt) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
func (inst *ValidatorWithdrawReceipt) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayoutAccount sets the "payout" account.
func (inst *ValidatorWithdrawReceipt) SetPayoutAccount(payout ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payout).WRITE()
	return inst
}

// GetPayoutAccount gets the "payout" account.
func (inst *ValidatorWithdrawReceipt) GetPayoutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetValidatorManagerAccount sets the "validatorManager" account.
func (inst *ValidatorWithdrawReceipt) SetValidatorManagerAccount(validatorManager ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(validatorManager)
	return inst
}

// GetValidatorManagerAccount gets the "validatorManager" account.
func (inst *ValidatorWithdrawReceipt) GetValidatorManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiptAccount sets the "receipt" account.
func (inst *ValidatorWithdrawReceipt) SetReceiptAccount(receipt ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receipt).WRITE()
	return inst
}

// GetReceiptAccount gets the "receipt" account.
func (inst *ValidatorWithdrawReceipt) GetReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetValidatorFundAccount sets the "validatorFund" account.
func (inst *ValidatorWithdrawReceipt) SetValidatorFundAccount(validatorFund ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(validatorFund).WRITE()
	return inst
}

// GetValidatorFundAccount gets the "validatorFund" account.
func (inst *ValidatorWithdrawReceipt) GetValidatorFundAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetValidatorAdminAccount sets the "validatorAdmin" account.
func (inst *ValidatorWithdrawReceipt) SetValidatorAdminAccount(validatorAdmin ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(validatorAdmin).SIGNER()
	return inst
}

// GetValidatorAdminAccount gets the "validatorAdmin" account.
func (inst *ValidatorWithdrawReceipt) GetValidatorAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ValidatorWithdrawReceipt) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ValidatorWithdrawReceipt) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetClockAccount sets the "clock" account.
func (inst *ValidatorWithdrawReceipt) SetClockAccount(clock ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *ValidatorWithdrawReceipt) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst ValidatorWithdrawReceipt) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ValidatorWithdrawReceipt,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ValidatorWithdrawReceipt) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ValidatorWithdrawReceipt) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PcVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payout is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ValidatorManager is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Receipt is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ValidatorFund is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ValidatorAdmin is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *ValidatorWithdrawReceipt) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ValidatorWithdrawReceipt")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        pipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         pcVault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          payout", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("validatorManager", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         receipt", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   validatorFund", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  validatorAdmin", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           clock", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj ValidatorWithdrawReceipt) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ValidatorWithdrawReceipt) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewValidatorWithdrawReceiptInstruction declares a new ValidatorWithdrawReceipt instruction with the provided parameters and accounts.
func NewValidatorWithdrawReceiptInstruction(
	// Accounts:
	controller ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey,
	payout ag_solanago.PublicKey,
	validatorManager ag_solanago.PublicKey,
	receipt ag_solanago.PublicKey,
	validatorFund ag_solanago.PublicKey,
	validatorAdmin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *ValidatorWithdrawReceipt {
	return NewValidatorWithdrawReceiptInstructionBuilder().
		SetControllerAccount(controller).
		SetPipelineAccount(pipeline).
		SetPcVaultAccount(pcVault).
		SetPayoutAccount(payout).
		SetValidatorManagerAccount(validatorManager).
		SetReceiptAccount(receipt).
		SetValidatorFundAccount(validatorFund).
		SetValidatorAdminAccount(validatorAdmin).
		SetTokenProgramAccount(tokenProgram).
		SetClockAccount(clock)
}
