// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create a StakerMember account.
//
// # Panics
//
// Panics if .
//
// # Errors
//
// This function will return an error if .
type AddStaker struct {

	// [0] = [] controller
	//
	// [1] = [WRITE] stakerManager
	//
	// [2] = [] staker
	//
	// [3] = [SIGNER] stakerSigner
	//
	// [4] = [WRITE, SIGNER] stakerAdmin
	//
	// [5] = [] systemProgram
	//
	// [6] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddStakerInstructionBuilder creates a new `AddStaker` instruction builder.
func NewAddStakerInstructionBuilder() *AddStaker {
	nd := &AddStaker{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetControllerAccount sets the "controller" account.
func (inst *AddStaker) SetControllerAccount(controller ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *AddStaker) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStakerManagerAccount sets the "stakerManager" account.
func (inst *AddStaker) SetStakerManagerAccount(stakerManager ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stakerManager).WRITE()
	return inst
}

// GetStakerManagerAccount gets the "stakerManager" account.
func (inst *AddStaker) GetStakerManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStakerAccount sets the "staker" account.
func (inst *AddStaker) SetStakerAccount(staker ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(staker)
	return inst
}

// GetStakerAccount gets the "staker" account.
func (inst *AddStaker) GetStakerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStakerSignerAccount sets the "stakerSigner" account.
func (inst *AddStaker) SetStakerSignerAccount(stakerSigner ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(stakerSigner).SIGNER()
	return inst
}

// GetStakerSignerAccount gets the "stakerSigner" account.
func (inst *AddStaker) GetStakerSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStakerAdminAccount sets the "stakerAdmin" account.
func (inst *AddStaker) SetStakerAdminAccount(stakerAdmin ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(stakerAdmin).WRITE().SIGNER()
	return inst
}

// GetStakerAdminAccount gets the "stakerAdmin" account.
func (inst *AddStaker) GetStakerAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddStaker) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddStaker) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRentAccount sets the "rent" account.
func (inst *AddStaker) SetRentAccount(rent ag_solanago.PublicKey) *AddStaker {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AddStaker) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst AddStaker) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddStaker,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddStaker) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddStaker) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StakerManager is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Staker is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StakerSigner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.StakerAdmin is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *AddStaker) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddStaker")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("stakerManager", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       staker", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" stakerSigner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  stakerAdmin", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj AddStaker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AddStaker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAddStakerInstruction declares a new AddStaker instruction with the provided parameters and accounts.
func NewAddStakerInstruction(
	// Accounts:
	controller ag_solanago.PublicKey,
	stakerManager ag_solanago.PublicKey,
	staker ag_solanago.PublicKey,
	stakerSigner ag_solanago.PublicKey,
	stakerAdmin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *AddStaker {
	return NewAddStakerInstructionBuilder().
		SetControllerAccount(controller).
		SetStakerManagerAccount(stakerManager).
		SetStakerAccount(staker).
		SetStakerSignerAccount(stakerSigner).
		SetStakerAdminAccount(stakerAdmin).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
