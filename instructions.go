// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_text "github.com/SolmateDev/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "SolmateCba"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// Create a controller. The admin can be another program.
	//
	// # Panics
	//
	// Panics if .
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_Create = ag_binary.TypeID([8]byte{24, 30, 200, 40, 5, 28, 7, 119})

	Instruction_Close = ag_binary.TypeID([8]byte{98, 165, 201, 177, 108, 65, 206, 96})

	// Create a Pipeline that is managed by a proxy operator.
	//
	// # Panics
	//
	// Panics if .
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_AddPipeline = ag_binary.TypeID([8]byte{253, 82, 215, 86, 120, 174, 163, 16})

	// Update parameters including the default fees and decay rate.
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_UpdatePipeline = ag_binary.TypeID([8]byte{46, 163, 0, 214, 40, 182, 36, 148})

	// Create a new Payout account and cycle periods forward in time.
	//
	// # Panics
	//
	// Panics if .
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_AppendPeriod = ag_binary.TypeID([8]byte{60, 97, 192, 203, 168, 102, 15, 65})

	// Developers (buyers) insert a bid.  If the user inserts a 0-bid, then the bid is deleted.
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_InsertBid = ag_binary.TypeID([8]byte{228, 73, 28, 144, 143, 199, 245, 197})

	// Propogate periods forward in time and distribute revenue to stakeholders.
	// Make sure to pick the right payout that will match the period that will be cranked (new period has started, but has not been cranked yet).
	// The crank instruction is the only way to change the bandwidth allocations!
	// # Errors
	//
	// This function will return an error if .
	Instruction_Crank = ag_binary.TypeID([8]byte{0, 232, 3, 195, 124, 117, 105, 53})

	// Create a ValidatorMember account.
	//
	// # Panics
	//
	// Panics if .
	//
	// # Errors
	//
	// This function will return an error if the bump is not correct.
	Instruction_AddValidator = ag_binary.TypeID([8]byte{250, 113, 53, 54, 141, 117, 215, 185})

	Instruction_SetValidator = ag_binary.TypeID([8]byte{150, 135, 78, 171, 156, 91, 161, 221})

	// Create a StakerMember account.
	//
	// # Panics
	//
	// Panics if .
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_AddStaker = ag_binary.TypeID([8]byte{3, 230, 74, 165, 5, 209, 205, 44})

	// add staker to receipt
	//
	// # Panics
	//
	// Panics if .
	//
	// # Errors
	//
	// This function will return an error if .
	Instruction_AddStakerToReceipt = ag_binary.TypeID([8]byte{235, 18, 27, 165, 101, 173, 141, 93})

	Instruction_UpdateReceipt = ag_binary.TypeID([8]byte{243, 126, 212, 140, 117, 11, 96, 219})

	Instruction_StakerWithdrawReceipt = ag_binary.TypeID([8]byte{245, 141, 201, 70, 163, 131, 245, 30})

	Instruction_ValidatorWithdrawReceipt = ag_binary.TypeID([8]byte{137, 46, 67, 141, 188, 174, 151, 5})

	Instruction_ClosePayout = ag_binary.TypeID([8]byte{251, 172, 228, 105, 98, 65, 239, 124})

	Instruction_WithdrawPipeline = ag_binary.TypeID([8]byte{58, 216, 40, 185, 241, 255, 96, 198})

	Instruction_CreateBidReceipt = ag_binary.TypeID([8]byte{88, 20, 141, 224, 220, 245, 150, 183})

	Instruction_UpdateBidReceipt = ag_binary.TypeID([8]byte{209, 211, 99, 106, 99, 56, 88, 136})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Create:
		return "Create"
	case Instruction_Close:
		return "Close"
	case Instruction_AddPipeline:
		return "AddPipeline"
	case Instruction_UpdatePipeline:
		return "UpdatePipeline"
	case Instruction_AppendPeriod:
		return "AppendPeriod"
	case Instruction_InsertBid:
		return "InsertBid"
	case Instruction_Crank:
		return "Crank"
	case Instruction_AddValidator:
		return "AddValidator"
	case Instruction_SetValidator:
		return "SetValidator"
	case Instruction_AddStaker:
		return "AddStaker"
	case Instruction_AddStakerToReceipt:
		return "AddStakerToReceipt"
	case Instruction_UpdateReceipt:
		return "UpdateReceipt"
	case Instruction_StakerWithdrawReceipt:
		return "StakerWithdrawReceipt"
	case Instruction_ValidatorWithdrawReceipt:
		return "ValidatorWithdrawReceipt"
	case Instruction_ClosePayout:
		return "ClosePayout"
	case Instruction_WithdrawPipeline:
		return "WithdrawPipeline"
	case Instruction_CreateBidReceipt:
		return "CreateBidReceipt"
	case Instruction_UpdateBidReceipt:
		return "UpdateBidReceipt"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create", (*Create)(nil),
		},
		{
			"close", (*Close)(nil),
		},
		{
			"add_pipeline", (*AddPipeline)(nil),
		},
		{
			"update_pipeline", (*UpdatePipeline)(nil),
		},
		{
			"append_period", (*AppendPeriod)(nil),
		},
		{
			"insert_bid", (*InsertBid)(nil),
		},
		{
			"crank", (*Crank)(nil),
		},
		{
			"add_validator", (*AddValidator)(nil),
		},
		{
			"set_validator", (*SetValidator)(nil),
		},
		{
			"add_staker", (*AddStaker)(nil),
		},
		{
			"add_staker_to_receipt", (*AddStakerToReceipt)(nil),
		},
		{
			"update_receipt", (*UpdateReceipt)(nil),
		},
		{
			"staker_withdraw_receipt", (*StakerWithdrawReceipt)(nil),
		},
		{
			"validator_withdraw_receipt", (*ValidatorWithdrawReceipt)(nil),
		},
		{
			"close_payout", (*ClosePayout)(nil),
		},
		{
			"withdraw_pipeline", (*WithdrawPipeline)(nil),
		},
		{
			"create_bid_receipt", (*CreateBidReceipt)(nil),
		},
		{
			"update_bid_receipt", (*UpdateBidReceipt)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
