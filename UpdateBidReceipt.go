// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateBidReceipt is the `updateBidReceipt` instruction.
type UpdateBidReceipt struct {
	TxSent *uint32
	LastTx *[32]uint8

	// [0] = [] controller
	//
	// [1] = [WRITE] pipeline
	//
	// [2] = [] payout
	//
	// [3] = [WRITE] bidReceipt
	//
	// [4] = [WRITE, SIGNER] bidder
	//
	// [5] = [] clock
	//
	// [6] = [] systemProgram
	//
	// [7] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateBidReceiptInstructionBuilder creates a new `UpdateBidReceipt` instruction builder.
func NewUpdateBidReceiptInstructionBuilder() *UpdateBidReceipt {
	nd := &UpdateBidReceipt{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetTxSent sets the "txSent" parameter.
func (inst *UpdateBidReceipt) SetTxSent(txSent uint32) *UpdateBidReceipt {
	inst.TxSent = &txSent
	return inst
}

// SetLastTx sets the "lastTx" parameter.
func (inst *UpdateBidReceipt) SetLastTx(lastTx [32]uint8) *UpdateBidReceipt {
	inst.LastTx = &lastTx
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *UpdateBidReceipt) SetControllerAccount(controller ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *UpdateBidReceipt) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPipelineAccount sets the "pipeline" account.
func (inst *UpdateBidReceipt) SetPipelineAccount(pipeline ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pipeline).WRITE()
	return inst
}

// GetPipelineAccount gets the "pipeline" account.
func (inst *UpdateBidReceipt) GetPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayoutAccount sets the "payout" account.
func (inst *UpdateBidReceipt) SetPayoutAccount(payout ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payout)
	return inst
}

// GetPayoutAccount gets the "payout" account.
func (inst *UpdateBidReceipt) GetPayoutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBidReceiptAccount sets the "bidReceipt" account.
func (inst *UpdateBidReceipt) SetBidReceiptAccount(bidReceipt ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bidReceipt).WRITE()
	return inst
}

// GetBidReceiptAccount gets the "bidReceipt" account.
func (inst *UpdateBidReceipt) GetBidReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBidderAccount sets the "bidder" account.
func (inst *UpdateBidReceipt) SetBidderAccount(bidder ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bidder).WRITE().SIGNER()
	return inst
}

// GetBidderAccount gets the "bidder" account.
func (inst *UpdateBidReceipt) GetBidderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetClockAccount sets the "clock" account.
func (inst *UpdateBidReceipt) SetClockAccount(clock ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *UpdateBidReceipt) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateBidReceipt) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateBidReceipt) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *UpdateBidReceipt) SetRentAccount(rent ag_solanago.PublicKey) *UpdateBidReceipt {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *UpdateBidReceipt) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst UpdateBidReceipt) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateBidReceipt,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateBidReceipt) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateBidReceipt) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TxSent == nil {
			return errors.New("TxSent parameter is not set")
		}
		if inst.LastTx == nil {
			return errors.New("LastTx parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payout is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BidReceipt is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Bidder is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *UpdateBidReceipt) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateBidReceipt")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TxSent", *inst.TxSent))
						paramsBranch.Child(ag_format.Param("LastTx", *inst.LastTx))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     pipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       payout", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   bidReceipt", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       bidder", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        clock", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj UpdateBidReceipt) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TxSent` param:
	err = encoder.Encode(obj.TxSent)
	if err != nil {
		return err
	}
	// Serialize `LastTx` param:
	err = encoder.Encode(obj.LastTx)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateBidReceipt) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TxSent`:
	err = decoder.Decode(&obj.TxSent)
	if err != nil {
		return err
	}
	// Deserialize `LastTx`:
	err = decoder.Decode(&obj.LastTx)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateBidReceiptInstruction declares a new UpdateBidReceipt instruction with the provided parameters and accounts.
func NewUpdateBidReceiptInstruction(
	// Parameters:
	txSent uint32,
	lastTx [32]uint8,
	// Accounts:
	controller ag_solanago.PublicKey,
	pipeline ag_solanago.PublicKey,
	payout ag_solanago.PublicKey,
	bidReceipt ag_solanago.PublicKey,
	bidder ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *UpdateBidReceipt {
	return NewUpdateBidReceiptInstructionBuilder().
		SetTxSent(txSent).
		SetLastTx(lastTx).
		SetControllerAccount(controller).
		SetPipelineAccount(pipeline).
		SetPayoutAccount(payout).
		SetBidReceiptAccount(bidReceipt).
		SetBidderAccount(bidder).
		SetClockAccount(clock).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
